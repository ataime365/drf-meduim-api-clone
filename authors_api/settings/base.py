"""
Django settings for authors_api project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import environ
from datetime import timedelta

env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent #src level

#Added
APP_DIR = BASE_DIR / "core_apps"

DEBUG = env.bool("DJANGO_DEBUG", False) #Default is False #Added

# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
]

SITE_ID = 1 #Because we set up "django.contrib.sites"

THIRD_PARTY_APPS = [
    "rest_framework", 
    "django_filters", 
    "django_countries", 
    "phonenumber_field",
    "drf_yasg",
    "corsheaders",
    "djcelery_email",
    "rest_framework.authtoken",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    "taggit",
    "django_elasticsearch_dsl",
    "django_elasticsearch_dsl_drf",
    # "djoser",
    # "rest_framework_simplejwt",
]

LOCAL_APPS =["core_apps.profiles", "core_apps.common", "core_apps.users", 
             "core_apps.articles", "core_apps.ratings", "core_apps.bookmarks", 
             "core_apps.responses", "core_apps.search",]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware", #Added
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "authors_api.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "authors_api.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": "mydatabase.sqlite3",#BASE_DIR / "db.sqlite3",
#     }
# }

DATABASES = {"default": env.db("DATABASE_URL")} 
#This will be very relevant when we have setup our postgres databases using docker 
#The db method is an alias for db_url.

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.ScryptPasswordHasher",
]

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = 'Africa/Lagos' #used to be UTC

USE_I18N = True

USE_TZ = True

ADMIN_URL = "supersecret/" #changing admin/ to supersecret/

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/staticfiles/'
STATIC_ROOT = BASE_DIR / "staticfiles"

MEDIA_URL = "/mediafiles/"
MEDIA_ROOT = BASE_DIR / "mediafiles"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CORS_URLS_REGEX = r"^api/.*$"
# CORS_URLS_REGEX defines which urls should have CORS settings added to the http responses

# "AUTH_USER_MODEL must be of the form 'app_label.model_name'"
AUTH_USER_MODEL = "users.User" #, the default value for AUTH_USER_MODEL is 'auth.User'. This refers to the built-in User model provided by Django's authentication framework, located in the django.contrib.auth.models module

# Celery message broker and result
CELERY_BROKER_URL = env("CELERY_BROKER") #Redis is our celery broker
CELERY_RESULT_BACKEND = CELERY_BROKER_URL #Redis url
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_RESULT_BACKEND_MAX_RETRIES = 10
CELERY_TASK_SEND_SENT_EVENT = True #For task tracking before they are consumed by a worker

if USE_TZ:
    CELERY_TIMEZONE = TIME_ZONE


# dj-rest-auth
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "dj_rest_auth.jwt_auth.JWTCookieAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated", #This means all the endpoints will be protected by default
    ],
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend",], # To be used by the api's
}

# drf simple jwt
SIMPLE_JWT = {
    "AUTH_HEADER_TYPES": ("Bearer", ),
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True, #New
    "SIGNING_KEY": env("SIGNING_KEY"),
    "USER_ID_FIELD": "id", #This is the field that will be used to identify the user in the token
    "USER_ID_CLAIM":"user_id", 
    # "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    # "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
}

REST_AUTH = {
    "USE_JWT": True,
    "JWT_AUTH_COOKIE":"authors-access-token",
    "JWT_AUTH_REFRESH_COOKIE":"authors-refresh-token",
    "REGISTER_SERIALIZER":# dj-rest-auth
            "core_apps.users.serializers.CustomRegisterSerializer", #Because we want to further customize the RegisterSerializer
}

# Configuring the authentication backends
AUTHENTICATION_BACKENDS = [
    "allauth.account.auth_backends.AuthenticationBackend", #This is the authentication backend that comes with allauth
    "django.contrib.auth.backends.ModelBackend", #This is the default authentication backend that comes with django
]

# Configure django allauth
ACCOUNT_AUTHENTICATION_METHOD = "email" # This means we are going to be using email to authenticate a user
ACCOUNT_EMAIL_REQUIRED = True #This means that an eamil would be required for signup
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_CONFIRM_EMAIL_ON_GET = True # Confirming email for a get request
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1 #1 day
ACCOUNT_USER_MODEL_USERNAME_FIELD = None # No username field in this application
ACCOUNT_USERNAME_REQUIRED = False # No username field in this application


ELASTICSEARCH_DSL = {
    "default": {
        "hosts": "elasticsearch:9200",   #elasticsearch container from the compose file (local.yml)
    },
}


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(name)-12s %(asctime)s %(module)s %(process)d %(thread)d %(message)s"
        }
    },
    "handlers":{
        "console": {
            "level": "DEBUG",
            "class":"logging.StreamHandler",
            "formatter": "verbose", #As defined in formatters above
        }
    },
    "root": {"level": "INFO", "handlers": ["console"]}, #root logger
}