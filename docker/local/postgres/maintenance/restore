#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset

working_dir="$(dirname ${0})" # $() for running commands inside. ${} for variables

#source command is used to read and execute commands from a bash file
source "${working_dir}/_sourced/constants.sh"
source "${working_dir}/_sourced/messages.sh"


if [[ -z ${1+x} ]]; then
    message_error "Backing filename is not specified yet it is a required parameter. Make sure you provide one and try again"
    exit 1 #Failure
fi

backup_filename="${BACKUP_DIR_PATH}/${1}"

if [[ ! -f "${backup_filename}" ]]; then
    message_error "No backup with the specified filename was found. Check out the 'backups' maintenance script to see if there is one and try again"
    
    exit 1 #Failure
fi

message_welcome "Restoring the '${POSTGRES_DB}' database from the '${backup_filename}' backup..."

if [[ "${POSTGRES_USER}" == "postgres" ]]; then
    # because we cant backup with the default postgres user, we must create or use another user
    message_error "Restoring as 'postgres' user is not allowed. Assign 'POSTGRES_USER' env with another one and try again"
    exit 1 #Failure
fi

# Environment Variables for pg_dump
export PGHOST="${POSTGRES_HOST}"
export PGPORT="${POSTGRES_PORT}"
export PGUSER="${POSTGRES_USER}"
export PGPASSWORD="${POSTGRES_PASSWORD}"
export PGDATABASE="${POSTGRES_DB}"

message_info "Dropping the database..."

dropdb "${PGDATABASE}" -f #Forcefully dropping the database

message_info "Creating a new database..."

createdb --owner="${POSTGRES_USER}"

message_info "Applying the backup to the new database..."
# unziping the zipped backuo file
gunzip -c "${backup_filename}" | psql "${POSTGRES_DB}" #psql to execute the sql's

message_success "The '${POSTGRES_DB}' database has been restored successfully from the '${backup_filename}' backup"


